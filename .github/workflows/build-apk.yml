name: Build APK from PWA

on:
  workflow_dispatch:
    inputs:
      appName:
        description: 'نام اپلیکیشن (مثلاً: فروشگاه اینترنتی من)'
        required: true
        default: 'اپلیکیشن من'
      packageId:
        description: 'شناسه پکیج اندروید (مثلاً: com.example.app)'
        required: true
        default: 'com.example.pwa'
      siteUrl:
        description: 'آدرس سایت (start_url)'
        required: true
        default: 'https://example.com'
      themeColor:
        description: 'رنگ تم (hex)'
        required: true
        default: '#7c3aed'
      backgroundColor:
        description: 'رنگ پس‌زمینه (hex)'
        required: true
        default: '#ffffff'
      displayMode:
        description: 'حالت نمایش'
        required: true
        default: 'standalone'
        options:
          - standalone
          - fullscreen
          - minimal-ui
          - browser
      manifestUrl:
        description: 'URL مانفیست آماده (اختیاری)'
        required: false
      icon192Url:
        description: 'URL آیکن 192 (اختیاری)'
        required: false
      icon512Url:
        description: 'URL آیکن 512 (اختیاری)'
        required: false
      splashUrl:
        description: 'URL اسپلش 1024×500 (اختیاری)'
        required: false
      signingMethod:
        description: 'روش امضا'
        required: true
        default: 'bubblewrap'
        options:
          - bubblewrap
          - custom
          - none
      versionCode:
        description: 'کد نسخه (integer)'
        required: true
        default: '1'
      versionName:
        description: 'نام نسخه (string)'
        required: true
        default: '1.0.0'
      enableNotifications:
        description: 'فعال‌سازی نوتیفیکیشن'
        required: true
        default: 'true'
        type: boolean
      enableLocation:
        description: 'فعال‌سازی جی‌پی‌اس'
        required: true
        default: 'false'
        type: boolean
      enableFullscreen:
        description: 'فعال‌سازی حالت تمام‌صفحه'
        required: true
        default: 'false'
        type: boolean
      enableOrientationLock:
        description: 'قفل‌کردن جهت صفحه'
        required: true
        default: 'false'
        type: boolean
      additionalUrls:
        description: 'URLهای اضافی برای ایندکس (یک URL در هر خط)'
        required: false

jobs:
  build-apk:
    runs-on: ubuntu-latest
    env:
      JAVA_OPTS: "-Djavax.net.ssl.trustStore=/dev/null -Djavax.net.ssl.trustStoreType=none"
      BUBBLEWRAP_VERSION: "1.17.0"
    steps:
      - name: 🧪 آماده‌سازی محیط کار
        id: setup
        run: |
          set -e
          echo "🔧 آماده‌سازی محیط کار"
          mkdir -p workspace && cd workspace
          
          # نصب وابستگی‌ها
          sudo apt-get update
          sudo apt-get install -y curl imagemagick openjdk-17-jdk zipalign
          
          # بررسی نصب Node.js
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # نصب Bubblewrap
          echo "📦 نصب Bubblewrap نسخه $BUBBLEWRAP_VERSION..."
          npm install -g @bubblewrap/cli@$BUBBLEWRAP_VERSION
          
          # بررسی نصب موفقیت‌آمیز
          bubblewrap --version
          echo "✅ Bubblewrap نصب شد"

      - name: 📝 تولید فایل manifest.json
        if: github.event.inputs.manifestUrl == ''
        run: |
          cd workspace
          echo "📝 تولید فایل manifest.json..."
          
          # محاسبه حرف اول برای آیکن پیش‌فرض
          APP_INITIAL=$(echo "${{ github.event.inputs.appName }}" | cut -c1 | tr '[:lower:]' '[:upper:]')
          
          cat > manifest.json << EOF
          {
            "name": "${{ github.event.inputs.appName }}",
            "short_name": "${{ github.event.inputs.appName }}",
            "start_url": "${{ github.event.inputs.siteUrl }}",
            "scope": "/",
            "display": "${{ github.event.inputs.displayMode }}",
            "background_color": "${{ github.event.inputs.backgroundColor }}",
            "theme_color": "${{ github.event.inputs.themeColor }}",
            "icons": [
              {
                "src": "icon-192.png",
                "sizes": "192x192",
                "type": "image/png",
                "purpose": "any"
              },
              {
                "src": "icon-512.png",
                "sizes": "512x512",
                "type": "image/png",
                "purpose": "any"
              },
              {
                "src": "icon-512-maskable.png",
                "sizes": "512x512",
                "type": "image/png",
                "purpose": "maskable"
              }
            ],
            "related_applications": [],
            "prefer_related_applications": false
          }
EOF

      - name: 🌐 دانلود فایل manifest از URL
        if: github.event.inputs.manifestUrl != ''
        run: |
          cd workspace
          echo "🌐 دانلود فایل manifest از URL..."
          curl -L -o manifest.json "${{ github.event.inputs.manifestUrl }}"
          
          # بررسی معتبر بودن فایل JSON
          if ! jq empty manifest.json 2>/dev/null; then
            echo "❌ فایل manifest.json معتبر نیست"
            exit 1
          fi

      - name: 🖼️ تولید آیکن‌ها
        run: |
          cd workspace
          echo "🖼️ تولید آیکن‌ها..."
          
          # محاسبه حرف اول برای آیکن پیش‌فرض
          APP_INITIAL=$(echo "${{ github.event.inputs.appName }}" | cut -c1 | tr '[:lower:]' '[:upper:]')
          
          # تولید آیکن 512x512
          if [ -n "${{ github.event.inputs.icon512Url }}" ]; then
            echo "📥 دانلود آیکن 512x512 از URL..."
            curl -L -o icon-512.png "${{ github.event.inputs.icon512Url }}"
          else
            echo "🎨 تولید آیکن 512x512 پیش‌فرض..."
            convert -size 512x512 xc:${{ github.event.inputs.themeColor }} \
              -gravity center \
              -fill white \
              -pointsize 180 \
              -draw "text 0,0 '$APP_INITIAL'" \
              icon-512.png
          fi
          
          # تولید آیکن 192x192
          if [ -n "${{ github.event.inputs.icon192Url }}" ]; then
            echo "📥 دانلود آیکن 192x192 از URL..."
            curl -L -o icon-192.png "${{ github.event.inputs.icon192Url }}"
          else
            echo "🎨 تولید آیکن 192x192 از 512x512..."
            convert icon-512.png -resize 192x192 icon-192.png
          fi
          
          # تولید آیکن maskable
          echo "🎨 تولید آیکن maskable 512x512..."
          convert icon-512.png \
            -gravity center \
            -extent 512x512 \
            -fill none \
            -stroke white \
            -strokewidth 32 \
            -draw "circle 256,256 256,32" \
            icon-512-maskable.png
          
          # تولید تصویر اسپلش
          if [ -n "${{ github.event.inputs.splashUrl }}" ]; then
            echo "📥 دانلود تصویر اسپلش از URL..."
            curl -L -o splash.png "${{ github.event.inputs.splashUrl }}"
          else
            echo "🎨 تولید تصویر اسپلش از آیکن 512x512..."
            convert icon-512.png \
              -resize 1024x500^ \
              -gravity center \
              -extent 1024x500 \
              -background ${{ github.event.inputs.backgroundColor }} \
              -flatten \
              splash.png
          fi
          
          # بررسی وجود فایل‌ها
          for file in icon-512.png icon-192.png icon-512-maskable.png splash.png; do
            if [ ! -f "$file" ]; then
              echo "❌ فایل $file ساخته نشد"
              exit 1
            fi
          done

      - name: 🧩 ایجاد فایل‌های PWA اساسی
        run: |
          cd workspace
          echo "🧩 ایجاد فایل‌های PWA اساسی..."
          
          # ایجاد index.html
          cat > index.html << EOF
          <!doctype html>
          <html lang="fa">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>${{ github.event.inputs.appName }}</title>
            <link rel="manifest" href="./manifest.json">
            <meta name="theme-color" content="${{ github.event.inputs.themeColor }}">
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: ${{ github.event.inputs.backgroundColor }};
                color: #333;
                text-align: center;
                min-height: 100vh;
                display: flex;
                flex-direction: column;
                justify-content: center;
              }
              .app-icon {
                width: 128px;
                height: 128px;
                margin: 0 auto 20px;
                background-color: ${{ github.event.inputs.themeColor }}15;
                border-radius: 24px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 48px;
                font-weight: bold;
                color: ${{ github.event.inputs.themeColor }};
              }
              h1 {
                color: ${{ github.event.inputs.themeColor }};
                margin-bottom: 10px;
              }
              .install-button {
                background-color: ${{ github.event.inputs.themeColor }};
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 30px;
                font-size: 16px;
                cursor: pointer;
                margin-top: 20px;
                transition: opacity 0.3s;
              }
              .install-button:hover {
                opacity: 0.9;
              }
            </style>
          </head>
          <body>
            <div class="app-icon">$APP_INITIAL</div>
            <h1>${{ github.event.inputs.appName }}</h1>
            <p>این یک اپلیکیشن پیش‌رونده (PWA) است که می‌تواند بدون نیاز به فروشگاه‌های اپلیکیشن نصب شود.</p>
            <button class="install-button" id="installButton">نصب اپلیکیشن</button>

            <script>
              let deferredPrompt;
              
              window.addEventListener('beforeinstallprompt', (e) => {
                e.preventDefault();
                deferredPrompt = e;
                
                const installButton = document.getElementById('installButton');
                installButton.textContent = 'نصب اپلیکیشن';
                installButton.style.display = 'block';
                
                installButton.addEventListener('click', () => {
                  installButton.disabled = true;
                  installButton.textContent = 'در حال نصب...';
                  
                  deferredPrompt.prompt();
                  
                  deferredPrompt.userChoice.then((choiceResult) => {
                    if (choiceResult.outcome === 'accepted') {
                      console.log('کاربر اپلیکیشن را نصب کرد');
                    } else {
                      console.log('کاربر از نصب صرف‌نظر کرد');
                      installButton.textContent = 'نصب اپلیکیشن';
                      installButton.disabled = false;
                    }
                    deferredPrompt = null;
                  });
                });
              });
              
              // Check if app is already installed
              window.addEventListener('appinstalled', (evt) => {
                document.getElementById('installButton').style.display = 'none';
                console.log('اپلیکیشن با موفقیت نصب شد');
              });
              
              // Register service worker
              if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                  navigator.serviceWorker.register('/service-worker.js')
                    .then(registration => {
                      console.log('ServiceWorker registered with scope:', registration.scope);
                    })
                    .catch(error => {
                      console.error('ServiceWorker registration failed:', error);
                    });
                });
              }
            </script>
          </body>
          </html>
EOF
          
          # ایجاد service-worker.js
          cat > service-worker.js << EOF
// Service Worker برای ${{ github.event.inputs.appName }}
const CACHE_NAME = 'pwa-${{ github.run_id }}';
const urlsToCache = [
  '/',
  '/index.html',
  '/manifest.json',
  '/icon-192.png',
  '/icon-512.png',
  '/icon-512-maskable.png'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        if (response) {
          return response;
        }
        return fetch(event.request);
      })
  );
});

self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
EOF

      - name: 🔑 ایجاد فایل keystore برای امضا
        if: github.event.inputs.signingMethod == 'bubblewrap'
        run: |
          cd workspace
          echo "🔑 ایجاد فایل keystore برای امضا..."
          
          # پاک‌سازی keystore قبلی
          rm -f keystore.jks
          
          # ایجاد پسوردهای تصادفی
          KEY_PASSWORD=$(openssl rand -base64 12)
          STORE_PASSWORD=$(openssl rand -base64 12)
          
          # ایجاد keystore جدید
          keytool -genkeypair -dname "CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown" \
            -alias my-key-alias \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -keystore keystore.jks \
            -storepass "$STORE_PASSWORD" \
            -keypass "$KEY_PASSWORD"
          
          # ذخیره پسوردها در محیط
          echo "KEYSTORE_PASSWORD=$STORE_PASSWORD" >> $GITHUB_ENV
          echo "KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV
          echo "KEY_ALIAS=my-key-alias" >> $GITHUB_ENV

      - name: 🔑 آماده‌سازی keystore سفارشی
        if: github.event.inputs.signingMethod == 'custom' && secrets.KEYSTORE_BASE64 != ''
        run: |
          cd workspace
          echo "🔑 آماده‌سازی keystore سفارشی..."
          
          # بررسی وجود secrets مورد نیاز
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ] || [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ] || [ -z "${{ secrets.ALIAS_NAME }}" ]; then
            echo "❌ لطفاً KEYSTORE_BASE64، KEYSTORE_PASSWORD و ALIAS_NAME را در GitHub Secrets تنظیم کنید"
            exit 1
          fi
          
          # دیکد کردن keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
          
          # ذخیره اطلاعات در محیط
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.ALIAS_NAME }}" >> $GITHUB_ENV

      - name: 🏗️ ایجاد پروژه اندروید
        run: |
          cd workspace
          echo "🏗️ ایجاد پروژه اندروید با Bubblewrap..."
          
          # ایجاد فایل bubblewrap.json
          cat > bubblewrap.json << EOF
          {
            "appVersionName": "${{ github.event.inputs.versionName }}",
            "appVersion": ${{ github.event.inputs.versionCode }},
            "backgroundColor": "${{ github.event.inputs.backgroundColor }}",
            "enableNotifications": ${{ github.event.inputs.enableNotifications }},
            "enableSiteSettingsShortcut": true,
            "fetchTimeout": 30000,
            "host": "${{ github.event.inputs.siteUrl | replace: 'https://', '' | replace: '/', '' }}",
            "iconUrl": "./icon-512.png",
            "launcherName": "${{ github.event.inputs.appName }}",
            "name": "${{ github.event.inputs.appName }}",
            "packageId": "${{ github.event.inputs.packageId }}",
            "signingKey": {
              "alias": "${{ env.KEY_ALIAS }}",
              "file": "keystore.jks",
              "keyPass": "${{ env.KEY_PASSWORD }}",
              "storePass": "${{ env.KEYSTORE_PASSWORD }}"
            },
            "shortcuts": [],
            "schemes": ["https"],
            "signing": {
              "keystore": "keystore.jks"
            },
            "splashScreenFadeOutDuration": 300,
            "startUrl": "${{ github.event.inputs.siteUrl }}",
            "themeColor": "${{ github.event.inputs.themeColor }}",
            "display": "${{ github.event.inputs.displayMode }}",
            "additionalTrustedOrigins": [],
            "webManifestUrl": "./manifest.json",
            "enableLocation": ${{ github.event.inputs.enableLocation }},
            "enableFullscreen": ${{ github.event.inputs.enableFullscreen }},
            "enableOrientationLock": ${{ github.event.inputs.enableOrientationLock }}
          }
EOF
          
          # بررسی وجود فایل keystore برای روش امضا
          if [ "${{ github.event.inputs.signingMethod }}" != "none" ] && [ ! -f keystore.jks ]; then
            echo "❌ فایل keystore یافت نشد"
            exit 1
          fi
          
          # اجرای دستور init
          bubblewrap init --manifestFile=manifest.json
          
          # بررسی موفقیت‌آمیز بودن
          if [ $? -ne 0 ]; then
            echo "❌ خطا در ایجاد پروژه اندروید"
            exit 1
          fi

      - name: 🖼️ افزودن تصویر اسپلش به منابع
        run: |
          cd workspace
          echo "🖼️ افزودن تصویر اسپلش به منابع اندروید..."
          
          # ایجاد پوشه‌های مورد نیاز
          mkdir -p app/src/main/res/drawable-xxxhdpi
          mkdir -p app/src/main/res/drawable-xxhdpi
          mkdir -p app/src/main/res/drawable-xhdpi
          mkdir -p app/src/main/res/drawable-hdpi
          mkdir -p app/src/main/res/drawable-mdpi
          
          # کپی تصویر اسپلش
          cp splash.png app/src/main/res/drawable-xxxhdpi/splash.png
          convert splash.png -resize 768x375 app/src/main/res/drawable-xxhdpi/splash.png
          convert splash.png -resize 512x250 app/src/main/res/drawable-xhdpi/splash.png
          convert splash.png -resize 384x187 app/src/main/res/drawable-hdpi/splash.png
          convert splash.png -resize 256x125 app/src/main/res/drawable-mdpi/splash.png

      - name: ⚙️ ساخت فایل APK
        run: |
          cd workspace
          echo "⚙️ ساخت فایل APK..."
          
          # ساخت فایل APK
          bubblewrap build --skipPwaValidation
          
          # بررسی موفقیت‌آمیز بودن ساخت
          if [ ! -f app-release-signed.apk ]; then
            echo "❌ خطا در ساخت فایل APK"
            ls -la
            exit 1
          fi
          
          echo "✅ ساخت APK با موفقیت انجام شد"

      - name: 📦 آماده‌سازی فایل‌های خروجی
        run: |
          cd workspace
          echo "📦 آماده‌سازی فایل‌های خروجی..."
          
          # ایجاد فایل توضیحات
          cat > README.txt << EOF
          # اطلاعات اپلیکیشن
          نام: ${{ github.event.inputs.appName }}
          شناسه پکیج: ${{ github.event.inputs.packageId }}
          نسخه: ${{ github.event.inputs.versionName }} (${{ github.event.inputs.versionCode }})
          آدرس سایت: ${{ github.event.inputs.siteUrl }}
          
          # نحوه نصب
          1. فایل APK را دانلود کنید
          2. روی دستگاه اندرویدی خود نصب کنید
          3. برای نصب از "نصب از منابع ناشناخته" استفاده کنید
          
          # توجه
          این اپلیکیشن یک Progressive Web App (PWA) است و نیاز به نصب ندارد.
          می‌توانید مستقیماً از طریق مرورگر به آدرس زیر مراجعه کنید:
          ${{ github.event.inputs.siteUrl }}
          
          # امضا
          روش امضا: ${{ github.event.inputs.signingMethod }}
          EOF
          
          # ایجاد فایل QR Code
          curl -o qrcode.png "https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=${{ github.event.inputs.siteUrl }}&bgcolor=ffffff&color=${{ github.event.inputs.themeColor | replace: '#', '' }}"

      - name: 📤 آپلود فایل‌های خروجی
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.appName }}-apk-${{ github.event.inputs.versionName }}
          path: |
            workspace/app-release-signed.apk
            workspace/README.txt
            workspace/qrcode.png
            workspace/manifest.json
            workspace/index.html
            workspace/service-worker.js
            workspace/icon-512.png
            workspace/icon-192.png
            workspace/splash.png
          retention-days: 14

      - name: 📢 اطلاع‌رسانی نتیجه
        if: always()
        run: |
          echo "🎉 فرآیند ساخت APK به پایان رسید"
          echo "نام اپلیکیشن: ${{ github.event.inputs.appName }}"
          echo "شناسه پکیج: ${{ github.event.inputs.packageId }}"
          echo "آدرس سایت: ${{ github.event.inputs.siteUrl }}"
          echo "نسخه: ${{ github.event.inputs.versionName }} (${{ github.event.inputs.versionCode }})"
          echo "روش امضا: ${{ github.event.inputs.signingMethod }}"
          
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ ساخت APK با موفقیت انجام شد"
            echo "فایل APK در بخش Artifacts موجود است"
            echo "برای دانلود فایل، به بخش Artifacts در صفحه این workflow مراجعه کنید"
          else
            echo "❌ خطا در ساخت فایل APK"
            echo "لطفاً لاگ‌های بالا را بررسی کنید"
          fi
          
          echo "ℹ️ توجه: اگر از روش امضا 'bubblewrap' استفاده کردید،"
          echo "برای امضای مجدد یا استفاده در محیط تولید،"
          echo "لطفاً از keystore ایجاد شده در محیط فعلی استفاده کنید."
